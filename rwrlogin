#! /usr/bin/expect --



# Usage line
set usage "Usage: $argv0 \[-dSV\] \[-c command\] \[-Evar=x\] \
\[-f cloginrc-file\] \[-p user-password\] \
\[-s script-file\] \[-t timeout\] \[-u username\] \
\[-v vty-password\] \[-x command-file\] \
\[-y ssh_cypher_type\] router \[router...\]\n"

# Password file
set password_file $env(HOME)/.cloginrc
# Default is to login to the firewall
set do_command 0
set do_script 0
# The default is to look in the password file to find the passwords.  This
# tracks if we receive them on the command line.
set do_passwd 1
set do_enapasswd 1
# Save config, if prompted
set do_saveconfig 0



# Find the user in the ENV, or use the unix userid.
if {[ info exists env(CISCO_USER) ]} {
	set default_user $env(CISCO_USER)
} elseif {[ info exists env(USER) ]} {
	set default_user $env(USER)
} elseif {[ info exists env(LOGNAME) ]} {
	set default_user $env(LOGNAME)
} else {
	if [ catch {exec id} reason ] {
	send_error "\nError: could not exec id: $reason\n"
	exit 1
	}
	regexp {\(([^)]*)} "$reason" junk default_user
}
if {[ info exists env(CLOGINRC) ]} {
	set password_file $env(CLOGINRC)
}




# Process the command line
for {set i 0} {$i < $argc} {incr i} {
    set arg [lindex $argv $i]

    switch  -glob -- $arg {
	# Expect debug mode
	-d* {
		exp_internal 1
		puts "Debug mode: yes";
	# Username
	} -u* {
	    if {! [  regexp .\[uU\](.+) $arg ignore user]} {
			incr i
			set username [ lindex $argv $i ]
			puts "Username: $username"
	    }
	# VTY Password
	} -p* {
	    if {! [  regexp .\[pP\](.+) $arg ignore userpasswd]} {
			incr i
			set userpasswd [ lindex $argv $i ]
			puts "Password: $userpasswd"
		}
		set do_passwd 0
		set do_enapasswd 0
	# Environment variable to pass to -s scripts
	} -E* {
	    if {[ regexp .\[E\](.+)=(.+) $arg ignore varname varvalue]} {
		set E$varname $varvalue
	    } else {
		#send_user "\nError: invalid format for -E in $arg\n"
		exit 1
	    }
	# Command to run.
	} -c* {
	    if {! [  regexp .\[cC\](.+) $arg ignore command]} {
			incr i
			set command [ lindex $argv $i ]
			puts "Command: $command";
	    }
	    set do_command 1
	# Expect script to run.
	} -s* {
	    if {! [  regexp .\[sS\](.+) $arg ignore sfile]} {
			incr i
			set sfile [ lindex $argv $i ]
			puts "Script-file: $sfile"
	    }
			if { ! [ file readable $sfile ] } {
				#send_user "\nError: Can't read $sfile\n"
				puts "- Script file can't readable..."
			exit 1
		}
		set do_script 1
	# save config on exit
	} -S* {
	    set do_saveconfig 1
	# cypher type
        } -y* {
            if {! [  regexp .\[eE\](.+) $arg ignore cypher]} {
                incr i
                set cypher [ lindex $argv $i ]
                puts "Cypher-type: $cypher"
            }
	# alternate cloginrc file
	} -f* {
		if {! [ regexp .\[fF\](.+) $arg ignore password_file]} {
			incr i
			set password_file [ lindex $argv $i ]
			puts "Password file: $password_file"
		}
	} -t* { #timeout
	    incr i
	    set timeout [ lindex $argv $i ]
	    puts "Timeout: $timeout"
        } -x* {
            if {! [  regexp .\[xX\](.+) $arg ignore cmd_file]} {
                incr i
                set cmd_file [ lindex $argv $i ]
                puts "Command-file: $cmd_file"
            }
	    if [ catch {set cmd_fd [open $cmd_file r]} reason ] {
			#send_user "\nError: $reason\n"
			puts "\nError: $reason\n"
		exit 1
	    }
            set cmd_text [read $cmd_fd]
            #close $cmd_fd
            set command [join [split $cmd_text \n] \;]
            set do_command 1
	# Version string
	} -V* {
	    send_user "rancid 2.3.6\n"
	    exit 0
	# Does tacacs automatically enable us?
        } -autoenable {
	    # ignore autoenable
	} -* {
		send_user "\nError: Unknown argument! $arg\n"
		send_user $usage
		exit 1
	} default {
		break
	}
	}
}

# This is a helper function to make the password file easier to
# maintain.  Using this the password file has the form:
# add password sl* 	pete cow
# add password at* 	steve
# add password *	hanky-pie
proc add {var args} { 
	global int_$var 
	lappend int_$var $args
}

proc include {args} {
    global env
    regsub -all "(^{|}$)" $args {} args
    if { [ regexp "^/" $args ignore ] == 0 } {
	set args $env(HOME)/$args
    }
    source_password_file $args
}

proc find {var router} {
    upvar int_$var list
    if { [info exists list] } {
	foreach line $list {
	    if { [string match [lindex $line 0] $router ] } {
		return [lrange $line 1 end]
	    }
	}
    }
    return {}
}



# Loads the password file.  Note that as this file is tcl, and that
# it is sourced, the user better know what to put in there, as it
# could install more than just password info...  I will assume however,
# that a "bad guy" could just as easy put such code in the clogin
# script, so I will leave .cloginrc as just an extention of that script

proc source_password_file { password_file } {
	global env
	if { ! [file exists $password_file] } {
		#send_user "\nError: password file ($password_file) does not exist\n"
		puts "\nError: password file ($password_file) does not exist\n"
		exit 1
	}
	file stat $password_file fileinfo
	if { [expr ($fileinfo(mode) & 007)] != 0000 } {
		#send_user "\nError: $password_file must not be world readable/writable\n"
		puts "\nError: $password_file must not be world readable/writable\n"
		exit 1
	}
	if [ catch {source $password_file} reason ] {
		#send_user "\nError: $reason\n"
		puts "\nError with password-file: $reason\n"
		exit 1
	}
}



# Log into the firewall.
# returns: 0 on success, 1 on failure
proc login { router user userpswd passwd enapasswd prompt cmethod cyphertype } {
	global spawn_id in_proc do_command do_script sshcmd
	
	set progs [llength $cmethod]
	foreach prog [lrange $cmethod 0 end] {
		if [string match "telnet*" $prog] {
			
			regexp {telnet(:([^[:space:]]+))*} $prog command suffix port
			if {"$port" == ""} {
				set retval [ catch {spawn telnet $router} reason ]
			} else {
				set retval [ catch {spawn telnet $router $port} reason ]
			}
			if { $retval } {
				send_user "\nError: telnet failed: $reason\n"
				return 1
			}
			expect -re "\[Ll]ogin:"
			send "$user\r"
			
			expect -re "\[Pp]assword:"
			send "$passwd\r"
			
			return 0
		}
	}
	return 1
}


proc run_commands {prompt command} {
	set commands [split $command \;]
	set num_commands [llength $commands]
	global timeout
	
	#send_user "\n $commands \n"
	#set cmd "co sh"
	foreach cmd $commands {
		send_user "\n###COMMAND = $cmd   (timeout=$timeout)"
		
		#============================
		send "$cmd\r"
		# обработка длинного вывода.
		set max 10
		set i 0
		if {$cmd == "config show"} {
			while (1) {
				if {$i == 10} {
					break
				}
				expect {
					-re "more" {
						send " \x20\r"
					}
					"LLDP parameters" {
						break
					}
				}
				incr i
			}
		}
		# обработка длинного вывода
		if {$cmd == "co sh"} {
			#send_user "123"
			while (1) {
				expect {
					-re "more" {
						send " \x20\r"
					}
					"LLDP parameters" {
						break
					}
				}
			}
		}
		expect $prompt 
		#============================
	}
	
	send "\003"
	send "exit\r"
	#send_user "\n"
	#interact используется для того, чтобы stdout,stderr передать пользователю. Допустим, если требуется ввести пароль лично от пользователя.
}

# Парсим файл с паролями
source_password_file $password_file
set in_proc 0
set exitval 0


# Проходим по списку аргументов, которые не подошли под предыдущие регулярки. Это должны быть сами устройства
foreach router [lrange $argv $i end] {
	set router [string tolower $router]
	puts "Router: $router"
	set prompt "\[>\\$]"

	# RWR так должен выглядить PROMPT
	if { $do_passwd || $do_enapasswd } {
		set pswd [find password $router]
		if { [llength $pswd] == 0 } {
			send_user "\nError: no password for $router in $password_file.\n"
			continue
		}
		set passwd [join [lindex $pswd 0] ""]
		set enapasswd [join [lindex $pswd 1]  ""]
	} else {
		set passwd $userpasswd
		#set enapasswd $enapasswd
		set enapasswd "Gtr%vkl2"
	}
	
	
	# Figure out username
	if {[info exists username]} {
		# command line username
		set ruser $username
	} else {
		set ruser [join [find user $router] ""]
		if { "$ruser" == "" } { set ruser $default_user }
	}
	
	# Figure out username's password (if different from the vty password)
	if {[info exists userpasswd]} {
		# command line username
		set userpswd $userpasswd
	} else {
		set userpswd [join [find userpassword $router] ""]
		if { "$userpswd" == "" } { set userpswd $passwd }
	}
	
	# Figure out cypher type
	if {[info exists cypher]} {
		# command line cypher type
		set cyphertype $cypher
	} else {
		set cyphertype [find cyphertype $router]
		if { "$cyphertype" == "" } { set cyphertype "3des" }
	}
	
	# Figure out connection method
	set cmethod [find method $router]
	if { "$cmethod" == "" } { set cmethod {{telnet} {ssh}} }
	
	# Figure out the SSH executable name
	set sshcmd [find sshcmd $router]
	if { "$sshcmd" == "" } { set sshcmd {ssh} }

	puts "$router	$cmethod $ruser % $passwd"
	
	# Login to the router
	if {[login $router $ruser $userpswd $passwd $enapasswd $prompt $cmethod $cyphertype]} {
		incr exitval
	}
	
	#run_commands "show time"
	if { $do_command } {
		run_commands $prompt $command
	} else {
		set command "config show"
		run_commands $prompt $command
	}
	
	sleep 0.5

}

exit 0

